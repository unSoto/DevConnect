import os
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery
from aiogram.filters import Command

welcome_router = Router()

welcome_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîé –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É", callback_data="seeker_menu")],
        [InlineKeyboardButton(text="üßë‚Äçüíº –ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data="employer_menu")]
    ]
)

WELCOME_TEXT = (
    "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DevConnect!</b>\n\n"
    "üöÄ <i>–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ IT</i>\n\n"
    "<b>‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n"
    "‚Ä¢ üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ/–≤–∞–∫–∞–Ω—Å–∏–π\n"
    "‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –∫—Ä–∞—Å–∏–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º\n"
    "‚Ä¢ üéØ –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –≤–∞–∫–∞–Ω—Å–∏–π\n"
    "‚Ä¢ üí¨ –ü—Ä—è–º–∞—è —Å–≤—è–∑—å –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏ –∏ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º–∏\n\n"
    "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:</b>"
)

WELCOME_IMAGE_PATH = os.path.join(os.path.dirname(__file__), "..", "..", "assets", "welcome.png")

@welcome_router.message(Command("start"))
async def send_welcome(message: Message):
    if os.path.exists(WELCOME_IMAGE_PATH):
        photo = FSInputFile(WELCOME_IMAGE_PATH)
        await message.answer_photo(photo, caption=WELCOME_TEXT, reply_markup=welcome_kb, parse_mode="HTML")
    else:
        await message.answer(WELCOME_TEXT, reply_markup=welcome_kb, parse_mode="HTML")

@welcome_router.callback_query(F.data == "seeker_menu")
async def seeker_menu_callback(callback: CallbackQuery):
    await callback.message.delete()
    from handlers.seeker import SEEKER_MENU_TEXT, seeker_menu_kb
    await callback.message.answer(SEEKER_MENU_TEXT, reply_markup=seeker_menu_kb, parse_mode="HTML")

@welcome_router.callback_query(F.data == "employer_menu")
async def employer_menu_callback(callback: CallbackQuery):
    await callback.message.delete()
    from handlers.employer import EMPLOYER_MENU_TEXT, employer_menu_kb
    await callback.message.answer(EMPLOYER_MENU_TEXT, reply_markup=employer_menu_kb, parse_mode="HTML")
