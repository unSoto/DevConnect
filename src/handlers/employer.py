from aiogram import Router, F, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from db import get_vacancy_by_user, create_vacancy, delete_vacancy, get_resumes_excluding_user

employer_router = Router()

employer_menu_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="create_vacancy")],
        [InlineKeyboardButton(text="üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—é–º–µ", callback_data="view_resumes")],
        [InlineKeyboardButton(text="üè¢ –ú–æ—è –∞–Ω–∫–µ—Ç–∞", callback_data="my_profile")],
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_welcome")]
    ]
)

EMPLOYER_MENU_TEXT = (
    "üè¢ <b>–ú–µ–Ω—é —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è</b>\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
    "üìù <i>–°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é</i>\n"
    "üë• <i>–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—é–º–µ</i>\n"
    "üè¢ <i>–ú–æ—è –∞–Ω–∫–µ—Ç–∞</i>\n"
    "üîô <i>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i>"
)

class VacancyForm(StatesGroup):
    company_name = State()
    position = State()
    requirements = State()
    conditions = State()
    contacts = State()

@employer_router.message(F.text == "üßë‚Äçüíº –ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
async def employer_menu(message: Message):
    await message.answer(EMPLOYER_MENU_TEXT, reply_markup=employer_menu_kb, parse_mode="HTML")

@employer_router.callback_query(F.data == "create_vacancy")
async def create_vacancy_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    user_id = callback.from_user.id
    vacancy = get_vacancy_by_user(user_id)
    if vacancy:
        msg = await callback.message.answer(
            "‚ö†Ô∏è <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏—è!</b>\n\n"
            "–•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë?\n"
            "üìù <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é'</i>\n"
            "üóëÔ∏è <i>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è ‚Äî '–£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é'</i>",
            reply_markup=employer_menu_kb,
            parse_mode="HTML"
        )
        await state.update_data(last_bot_message_id=msg.message_id)
        return

    msg = await callback.message.answer("üè¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(VacancyForm.company_name)

@employer_router.message(VacancyForm.company_name)
async def vacancy_company_name(message: Message, state: FSMContext):
    await message.delete()

    data = await state.get_data()
    last_bot_msg_id = data.get("last_bot_message_id")
    if last_bot_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_msg_id)
        except:
            pass

    await state.update_data(company_name=message.text)
    msg = await message.answer("üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\nüëî –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:")
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(VacancyForm.position)

@employer_router.message(VacancyForm.position)
async def vacancy_position(message: Message, state: FSMContext):
    await message.delete()

    data = await state.get_data()
    last_bot_msg_id = data.get("last_bot_message_id")
    if last_bot_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_msg_id)
        except:
            pass

    await state.update_data(position=message.text)
    msg = await message.answer("üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\nüìã –û–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É:")
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(VacancyForm.requirements)

@employer_router.message(VacancyForm.requirements)
async def vacancy_requirements(message: Message, state: FSMContext):
    await message.delete()

    data = await state.get_data()
    last_bot_msg_id = data.get("last_bot_message_id")
    if last_bot_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_msg_id)
        except:
            pass

    await state.update_data(requirements=message.text)
    msg = await message.answer("üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\nüí∞ –û–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã (–∑–∞—Ä–ø–ª–∞—Ç–∞, –≥—Ä–∞—Ñ–∏–∫, –ª—å–≥–æ—Ç—ã –∏ —Ç.–¥.):")
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(VacancyForm.conditions)

@employer_router.message(VacancyForm.conditions)
async def vacancy_conditions(message: Message, state: FSMContext):
    await message.delete()

    data = await state.get_data()
    last_bot_msg_id = data.get("last_bot_message_id")
    if last_bot_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_msg_id)
        except:
            pass

    await state.update_data(conditions=message.text)
    msg = await message.answer("üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\nüìû –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏:")
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(VacancyForm.contacts)

@employer_router.message(VacancyForm.contacts)
async def vacancy_contacts(message: Message, state: FSMContext):
    await message.delete()

    data = await state.get_data()
    last_bot_msg_id = data.get("last_bot_message_id")
    if last_bot_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_msg_id)
        except:
            pass

    user_id = message.from_user.id
    create_vacancy(
        user_id,
        data["company_name"],
        data["position"],
        data["requirements"],
        data["conditions"],
        message.text
    )
    await message.answer("‚úÖ <b>–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\nüè¢ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.", reply_markup=employer_menu_kb, parse_mode="HTML")
    await state.clear()

@employer_router.callback_query(F.data == "my_profile")
async def my_profile_callback(callback: CallbackQuery):
    await callback.message.delete()
    user_id = callback.from_user.id
    vacancy = get_vacancy_by_user(user_id)
    if not vacancy:
        await callback.message.answer(
            "üìã <b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞</b>\n\n"
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.\n\n"
            "üìù <i>–°–æ–∑–¥–∞–π—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é</i>",
            reply_markup=employer_menu_kb,
            parse_mode="HTML"
        )
        return

    await callback.message.answer(
        "üìã <b>–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è</b>\n\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {vacancy[2]}\n"
        f"üëî <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {vacancy[3]}\n"
        f"üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b> {vacancy[4]}\n"
        f"üí∞ <b>–£—Å–ª–æ–≤–∏—è:</b> {vacancy[5]}\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {vacancy[6]}\n\n"
        "üìù <i>–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é'</i>\n"
        "üóëÔ∏è <i>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è ‚Äî '–£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é'</i>",
        reply_markup=employer_menu_kb,
        parse_mode="HTML"
    )

@employer_router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
async def edit_vacancy(message: Message, state: FSMContext):
    await message.delete()
    user_id = message.from_user.id
    vacancy = get_vacancy_by_user(user_id)
    if not vacancy:
        msg = await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=employer_menu_kb, parse_mode="HTML")
        await state.update_data(last_bot_message_id=msg.message_id)
        return
    msg = await message.answer("üè¢ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–µ–µ):")
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(VacancyForm.company_name)

@employer_router.callback_query(F.data == "view_resumes")
async def view_resumes_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.update_data(resume_page=0)
    await send_resume_page(callback.message, state)

async def send_resume_page(message: Message, state: FSMContext):
    data = await state.get_data()
    page = data.get("resume_page", 0)
    limit = 1
    offset = page * limit
    user_id = message.from_user.id
    resumes = get_resumes_excluding_user(user_id, offset=offset, limit=limit)

    if not resumes:
        if page == 0:
            await message.answer(
                "üìã <b>–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—é–º–µ.",
                reply_markup=employer_menu_kb,
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "üìã <b>–ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞</b>\n\n"
                "–ë–æ–ª—å—à–µ —Ä–µ–∑—é–º–µ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=employer_menu_kb,
                parse_mode="HTML"
            )
        return

    resume = resumes[0]

    navigation_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_resume"),
                InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_resume")
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")]
        ]
    )

    await message.answer_photo(
        photo=FSInputFile("assets/resume.png"),
        caption=f"üë§ <b>–†–µ–∑—é–º–µ #{page + 1}</b>\n\n"
               f"üë®‚Äçüíº <b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:</b> {resume[1]}\n"
               f"üéØ <i>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</i> {resume[2]}\n"
               f"üíº <i>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</i> {resume[3]}\n"
               f"üõ†Ô∏è <i>–ù–∞–≤—ã–∫–∏:</i> {resume[4]}\n"
               f"üìû <i>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</i> {resume[5]}",
        parse_mode="HTML",
        reply_markup=navigation_kb
    )

@employer_router.callback_query(F.data == "next_resume")
async def next_resume_page(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    data = await state.get_data()
    page = data.get("resume_page", 0) + 1
    await state.update_data(resume_page=page)
    await send_resume_page(callback.message, state)

@employer_router.callback_query(F.data == "prev_resume")
async def prev_resume_page(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    data = await state.get_data()
    page = max(data.get("resume_page", 0) - 1, 0)
    await state.update_data(resume_page=page)
    await send_resume_page(callback.message, state)

@employer_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
async def delete_my_vacancy(message: Message, state: FSMContext):
    await message.delete()

    try:
        await message.bot.delete_message(message.chat.id, message.message_id - 1)
    except:
        pass

    user_id = message.from_user.id
    delete_vacancy(user_id)
    from handlers.welcome import WELCOME_TEXT, welcome_kb
    await message.answer("‚úÖ <b>–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>\n\nüè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é...", reply_markup=welcome_kb, parse_mode="HTML")

@employer_router.callback_query(F.data == "back_to_welcome")
async def back_to_welcome_callback(callback: CallbackQuery):
    await callback.message.delete()
    from handlers.welcome import WELCOME_TEXT, welcome_kb
    await callback.message.answer(WELCOME_TEXT, reply_markup=welcome_kb, parse_mode="HTML")
