from aiogram import Router, F, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from db import get_resume, create_resume, delete_resume, get_vacancies

seeker_router = Router()

seeker_menu_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ", callback_data="create_resume")],
        [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–π", callback_data="view_vacancies")],
        [InlineKeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞", callback_data="my_resume")],
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_welcome")]
    ]
)

SEEKER_MENU_TEXT = (
    "üë§ <b>–ú–µ–Ω—é —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è</b>\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
    "üìù <i>–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ</i>\n"
    "üìã <i>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞–∫–∞–Ω—Å–∏–π</i>\n"
    "üë§ <i>–ú–æ—è –∞–Ω–∫–µ—Ç–∞</i>\n"
    "üîô <i>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i>"
)

class ResumeForm(StatesGroup):
    name = State()
    specialization = State()
    experience = State()
    skills = State()
    contacts = State()

@seeker_router.message(F.text == "üîé –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É")
async def seeker_menu(message: Message):
    await message.answer(SEEKER_MENU_TEXT, reply_markup=seeker_menu_kb, parse_mode="HTML")

@seeker_router.callback_query(F.data == "create_resume")
async def create_resume_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_id = callback.from_user.id
    resume = get_resume(user_id)
    if resume:
        msg = await callback.message.answer(
            "‚ö†Ô∏è <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–µ–∑—é–º–µ!</b>\n\n"
            "–•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ?\n"
            "üìù <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ'</i>\n"
            "üóëÔ∏è <i>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è ‚Äî '–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—é–º–µ'</i>",
            reply_markup=seeker_menu_kb,
            parse_mode="HTML"
        )
        await state.update_data(last_bot_message_id=msg.message_id)
        return

    msg = await callback.message.answer("üë§ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ</b>\n\nüìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(ResumeForm.name)

@seeker_router.message(ResumeForm.name)
async def resume_name(message: Message, state: FSMContext):
    await message.delete()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    last_bot_msg_id = data.get("last_bot_message_id")
    if last_bot_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_msg_id)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

    await state.update_data(name=message.text)
    msg = await message.answer("üë§ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ</b>\n\nüéØ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:")
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(ResumeForm.specialization)

@seeker_router.message(ResumeForm.specialization)
async def resume_specialization(message: Message, state: FSMContext):
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    last_bot_msg_id = data.get("last_bot_message_id")
    if last_bot_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_msg_id)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

    await state.update_data(specialization=message.text)
    msg = await message.answer("üë§ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ</b>\n\nüíº –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:")
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(ResumeForm.experience)

@seeker_router.message(ResumeForm.experience)
async def resume_experience(message: Message, state: FSMContext):
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    last_bot_msg_id = data.get("last_bot_message_id")
    if last_bot_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_msg_id)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

    await state.update_data(experience=message.text)
    msg = await message.answer("üë§ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ</b>\n\nüõ†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:")
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(ResumeForm.skills)

@seeker_router.message(ResumeForm.skills)
async def resume_skills(message: Message, state: FSMContext):
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    last_bot_msg_id = data.get("last_bot_message_id")
    if last_bot_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_msg_id)
        except:
            pass

    await state.update_data(skills=message.text)
    msg = await message.answer("üë§ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ</b>\n\nüìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(ResumeForm.contacts)

@seeker_router.message(ResumeForm.contacts)
async def resume_contacts(message: Message, state: FSMContext):
    await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    last_bot_msg_id = data.get("last_bot_message_id")
    if last_bot_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_bot_msg_id)
        except:
            pass

    user_id = message.from_user.id
    create_resume(
        user_id,
        data["name"],
        data["specialization"],
        data["experience"],
        data["skills"],
        message.text
    )
    await message.answer("‚úÖ <b>–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\nüë§ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏.", reply_markup=seeker_menu_kb, parse_mode="HTML")
    await state.clear()

@seeker_router.callback_query(F.data == "my_resume")
async def my_resume_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    user_id = callback.from_user.id
    resume = get_resume(user_id)
    if not resume:
        msg = await callback.message.answer(
            "üìã <b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞</b>\n\n"
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ.\n\n"
            "üìù <i>–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é</i>",
            reply_markup=seeker_menu_kb,
            parse_mode="HTML"
        )
        await state.update_data(last_bot_message_id=msg.message_id)
        return

    msg = await callback.message.answer(
        "üìã <b>–í–∞—à–µ —Ä–µ–∑—é–º–µ</b>\n\n"
        f"üë®‚Äçüíº <b>–ò–º—è:</b> {resume[1]}\n"
        f"üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {resume[2]}\n"
        f"üíº <b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b> {resume[3]}\n"
        f"üõ†Ô∏è <b>–ù–∞–≤—ã–∫–∏:</b> {resume[4]}\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {resume[5]}\n\n"
        "üìù <i>–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ'</i>\n"
        "üóëÔ∏è <i>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è ‚Äî '–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—é–º–µ'</i>",
        reply_markup=seeker_menu_kb,
        parse_mode="HTML"
    )
    await state.update_data(last_bot_message_id=msg.message_id)

@seeker_router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ")
async def edit_resume(message: Message, state: FSMContext):
    await message.delete()
    user_id = message.from_user.id
    resume = get_resume(user_id)
    if not resume:
        msg = await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∑—é–º–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=seeker_menu_kb, parse_mode="HTML")
        await state.update_data(last_bot_message_id=msg.message_id)
        return
    msg = await message.answer("üë§ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ</b>\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–µ–µ):")
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(ResumeForm.name)

@seeker_router.callback_query(F.data == "view_vacancies")
async def view_vacancies_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.update_data(vacancy_page=0)
    await send_vacancy_page(callback.message, state)

async def send_vacancy_page(message: Message, state: FSMContext):
    data = await state.get_data()
    page = data.get("vacancy_page", 0)
    limit = 1
    offset = page * limit
    vacancies = get_vacancies(offset=offset, limit=limit)
    if not vacancies:
        await message.answer(
            "üìã <b>–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.",
            reply_markup=seeker_menu_kb,
            parse_mode="HTML"
        )
        return

    vacancy = vacancies[0]

    navigation_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_vacancy"),
                InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_vacancy")
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")]
        ]
    )

    await message.answer_photo(
        photo=FSInputFile("assets/vacancy.png"),
        caption=f"üíº <b>–í–∞–∫–∞–Ω—Å–∏—è #{page + 1}</b>\n\n"
               f"üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:</b> {vacancy[2]}\n"
               f"üëî <b>–í–∞–∫–∞–Ω—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:</b> {vacancy[3]}\n"
               f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {vacancy[4]}\n"
               f"üìã <b>–£—Å–ª–æ–≤–∏—è:</b> {vacancy[5]}\n"
               f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {vacancy[6]}",
        parse_mode="HTML",
        reply_markup=navigation_kb
    )

@seeker_router.callback_query(F.data == "next_vacancy")
async def next_vacancy_page(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    data = await state.get_data()
    page = data.get("vacancy_page", 0) + 1
    await state.update_data(vacancy_page=page)
    await send_vacancy_page(callback.message, state)

@seeker_router.callback_query(F.data == "prev_vacancy")
async def prev_vacancy_page(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    data = await state.get_data()
    page = max(data.get("vacancy_page", 0) - 1, 0)
    await state.update_data(vacancy_page=page)
    await send_vacancy_page(callback.message, state)

@seeker_router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—é–º–µ")
async def delete_my_resume(message: Message, state: FSMContext):
    await message.delete()

    try:
        await message.bot.delete_message(message.chat.id, message.message_id - 1)
    except:
        pass

    user_id = message.from_user.id
    delete_resume(user_id)
    from handlers.welcome import WELCOME_TEXT, welcome_kb
    await message.answer("‚úÖ <b>–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!</b>\n\nüè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é...", reply_markup=welcome_kb, parse_mode="HTML")

@seeker_router.callback_query(F.data == "back_to_welcome")
async def back_to_welcome_callback(callback: CallbackQuery):
    await callback.message.delete()
    from handlers.welcome import WELCOME_TEXT, welcome_kb
    await callback.message.answer(WELCOME_TEXT, reply_markup=welcome_kb, parse_mode="HTML")
